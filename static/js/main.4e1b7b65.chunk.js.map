{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodosFilter/TodosFilter.jsx","components/TodoApp/TodoApp.jsx","App.js","index.js"],"names":["TodoItem","todo","key","handleStatus","deleteTodo","changeTodo","useState","edit","setEdit","newTitle","setNewTitle","className","ClassNames","completed","type","checked","onChange","id","onDoubleClick","title","onClick","event","target","value","trimLeft","onKeyDown","autoFocus","TodoList","todos","setTodos","map","filter","item","TodosFilter","setFilter","FILTERS","href","cn","selected","all","active","TodoApp","todoTitle","setTodoTitle","allCompleted","setAllcompleted","uncompletedTodos","filteredTodos","useEffect","localStorage","JSON","parse","getItem","setItem","stringify","onSubmit","preventDefault","prevTodos","Date","placeholder","htmlFor","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e1b7b65.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ClassNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({\n  todo,\n  key,\n  handleStatus,\n  deleteTodo,\n  changeTodo,\n}) => {\n  const [edit, setEdit] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n  const handleEdit = (event) => {\n    if (event.key === 'Enter' && newTitle) {\n      changeTodo(todo.id, newTitle);\n      setEdit(false);\n      setNewTitle('');\n    }\n\n    if (event.key === 'Escape') {\n      setNewTitle('');\n      setEdit(false);\n    }\n  };\n\n  return (\n    <li key={key} className={ClassNames({ completed: todo.completed, edit })}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => handleStatus(todo.id)}\n        />\n        <label onDoubleClick={() => setEdit(true)}>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      {edit && (\n        <input\n          type=\"text\"\n          className=\"editing\"\n          onChange={event => setNewTitle(event.target.value.trimLeft())}\n          onKeyDown={handleEdit}\n          autoFocus\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.objectOf.isRequired,\n  key: PropTypes.number.isRequired,\n  handleStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  changeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({ todos, setTodos }) => {\n  const handleStatus = (id) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const changeTodo = (id, title) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return { ...todo, title };\n    }));\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(item => (\n        <TodoItem\n          todo={item}\n          key={item.id}\n          handleStatus={handleStatus}\n          deleteTodo={deleteTodo}\n          changeTodo={changeTodo}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport function TodosFilter({ filter, setFilter, FILTERS }) {\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={cn({ selected: filter === FILTERS.all })}\n          onClick={() => setFilter(FILTERS.all)}\n        >\n          All\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"#/\"\n          className={cn({ selected: filter === FILTERS.active })}\n          onClick={() => setFilter(FILTERS.active)}\n        >\n          Active\n        </a>\n      </li>\n      <li>\n        <a\n          href=\"#/\"\n          className={cn({ selected: filter === FILTERS.completed })}\n          onClick={() => setFilter(FILTERS.completed)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n}\n\nTodosFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  FILTERS: PropTypes.objectOf(\n    PropTypes.string,\n  ).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { TodoList } from '../TodoList/TodoList';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nexport const TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [allCompleted, setAllcompleted] = useState(false);\n  const FILTERS = {\n    all: 'All',\n    active: 'Active',\n    completed: 'Completed',\n  };\n  const [filter, setFilter] = useState(FILTERS.all);\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n\n  const filteredTodos = todos.filter((todo) => {\n    switch (filter) {\n      case FILTERS.completed:\n        return todo.completed;\n\n      case FILTERS.active:\n        return !todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n\n  const todoAddition = (event) => {\n    if (!todoTitle) {\n      return;\n    }\n\n    setTodos(prevTodos => [...prevTodos,\n      {\n        id: +new Date(),\n        title: todoTitle,\n        completed: false,\n      },\n    ]);\n    setTodoTitle('');\n  };\n\n  const checkAllCompleted = () => {\n    setAllcompleted(!allCompleted);\n\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: !allCompleted,\n    })));\n  };\n\n  const deleteCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  useEffect(() => {\n    if (!localStorage.todos) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <section className=\"todoApp\">\n      <header className=\"header\">\n        <h1>My todos:</h1>\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          todoAddition(event);\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={todoTitle}\n            onChange={({ target }) => setTodoTitle(target.value.trimLeft())}\n          />\n        </form>\n      </header>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={false}\n          onChange={() => checkAllCompleted()}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as completed</label>\n        <TodoList todos={filteredTodos} setTodos={setTodos} />\n      </section>\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {uncompletedTodos.length}\n            {uncompletedTodos.length > 1 ? ' items ' : ' item '}\n            left\n          </span>\n          <TodosFilter\n            filter={filter}\n            setFilter={setFilter}\n            FILTERS={FILTERS}\n          />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={() => deleteCompleted()}\n          >\n            Clear completed\n          </button>\n        </footer>\n      )}\n    </section>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}